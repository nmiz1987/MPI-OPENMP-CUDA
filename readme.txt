מגיש:
נתנאל מזרחי 301138137

1. מצורף קובץ make לטובת קימפול.
2. קובץ ההרצה שנוצר נקרא final.
3. מצורפים קבצי קלט אפשריים לטובת הרצה.

***************************************************
השתמשתי בתוכנית במבנה נתונים של טבלה כדי למצוא האם יש התאמה בין 2 תווים.
במקום כל פעם לקחת שני תווים, ולרוץ על שתי הקבוצות, בניתי 2 טבלות על סמך 2 הקבוצות ובכל פעם שנדרש לחפש התאמה בין התווים, ניגשים לטבלה עם התווים והם גם משתמשים כאינדקס בעמודה ושורה. במידה ומקבלים 1 יש התאמה, 0 אם אין התאמה.

תהליך התוכנית (איך מוקבלה):
1. ה- MAIN מחולק ל- ROOT וכל ה- WORKERS.
2. ה- ROOT בונה 2 טבלות עפ"י הקבוצות.
2. ה- ROOT קורא את הנתונים מה- stdin.
3. מבוצע שימוש ב-pragma omp parallel for בזמן בדיקת הקלט שכל האותיות גדולות, אם לא גדולות אז מבוצע שינוי לאות גדולה (גם ב- seq1 וגם בכל seq2).
4. ה- ROOT מחשב את גודל החלק של כל עובד (כולל ROOT) ושולח את כל הנתונים שנדרשים.
כל WORKER בונה את הטבלות.
5. כל WORKER כולל ROOT שולחים את הנתונים הדרושים לחישוב לקודה: 2 קבוצות, משקלים, seq1 ו- seq2 המחולק.
6. בקודה מבוצע הקצאות לכל מה שנדרש.
7. בקודה מבוצע שימוע במשתני constant כדי לזרז את תהליך הגישה לזיכרון, נדרש רק לקרוא מזכרון זה.
8. עבור כל מחרוזת (מהחלק של כל עובד) מבוצע שליחה למתודה שפועלת בקודה שבודקת את החישוב על סמך ההגדרה.
9. בחישוב יש הפרדה בין מחרוזת באורך זהה ואורך שונה כדי להקל על תהליך החישוב.
10. מבוצע בקודה שמירה של התוצאות מהחישוב.
11. תוצאות החישוב נשלחות מהקודה לתוכנית הרגילה (HOST).
12. ROOT אוסף את כל התוצאות מהעובדים.
13. ROOT מדפיס את התוצאות למסך.
14. כל תהליך שצריך לשחרר הקצאות דינמיות משחרר אותם.
